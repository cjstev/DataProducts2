inTrain<-createDataPartition(y=spam$type,p=.75,list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type~.,data=training,method="glm")
modelFit
modelFit$finalModel
prediction<- predict(modelFit,newdata=testing)
prediction<- predict(modelFit,newdata=testing)
predictions
predictions<- predict(modelFit,newdata=testing)
predictions
confustionMatrix(predictions,testing$type)
confusionMatrix(predictions,testing$type)
library(caret);library(kernlab);data(spam)
inTrain<-createDataPartition(y=spam$type,p=.75,list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type~.,data=training,method="glm")
modelFit
modelFit$finalModel
predictions<- predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$type)
folds <-createFolds(y=spam$type,k=10,list=T,returnTrain=T)
sapply(folds,length)
folds[[1]][1:10]
set.seed(32323)
folds <-createFolds(y=spam$type,k=10,list=T,returnTrain=T)
sapply(folds,length)
folds[[1]][1:10]
set.seed(32323)
folds <-createFolds(y=spam$type,k=10,list=T,returnTrain=T)
sapply(folds,length)
folds[[1]][1:10]
set.seed(32323)
folds <-createFolds(y=spam$type,k=10,list=T,returnTrain=T)
sapply(folds,length)
folds[[1]][1:10]
folds[[1]][1:10]
folds
folds[[1]]
set.seed(32323)
folds <-createFolds(y=spam$type,k=10,list=T,returnTrain=F)
sapply(folds,length)
folds[[1]][1:10]
set.seed(32323)
folds <-createFolds(y=spam$type,times=10,list=T)
sapply(folds,length)
folds <-createResample(y=spam$type,times=10,list=T)
set.seed(32323)
folds <-createResample(y=spam$type,times=10,list=T)
sapply(folds,length)
folds[[1]][1:10]
tme<-1:1000
folds <-createTimeSlices(y=tme,initialWindow=20,horizon=10)
sapply(folds,length)
names(folds)
folds[[1]]
folds$train[[1]]
folds$test[[1]]
modelFit<-train(type~.,data=training,method="glm")
args(train.default)
args(trainControl)
set.seed(1235)
modelFit2 <- train(type~.,data=training,method='glm')
modelFit2
library(ISLR)
library(ISLR); library(ggplot2);library(caret)
data(Wage)
summary(Wage)
inTrain<-createDataPartition(y=Wage$wage,p=.7,list=F)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
dim(training);dim(testing)
featurePlot(x=training[,c("age",'education','jobclass']),y=training$wage,plot='pairs')
featurePlot(x=training[,c("age",'education','jobclass')],y=training$wage,plot='pairs')
qplot(age,wage,data=training)
qplot(age,wage,color=jobclass,data=training)
qq <- qplot(age,wage,color=education,data=training)
qq + geom_smooth(method='lm',formula=y~x)
cutWage<-cut2(training$wage,g=3)
table(cutWage)
library(ISLR); library(ggplot2);library(caret);library(Hmisc)
cutWage<-cut2(training$wage,g=3)
table(cutWage)
p1<-qplot(cutWage,age,data=training,fill=cutWage,geom=c('boxplot'))
p1
p2 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c('boxplot','jitter'))
grid.arrange(p1,p2,ncol=2)
install.packages("gridExtra")
library(ISLR); library(ggplot2);library(caret);library(Hmisc);library(gridExtra)
p2 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c('boxplot','jitter'))
grid.arrange(p1,p2,ncol=2)
t1 <- table(cutWage,training$jobclass)
t1
prop.table(t1,1)
qplot(wage,color=education,data=training,geom='density')
library(caret);library(kernlab);data(spam)
inTrain<-createDataPartition(y=spam$type,p=.75,list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve,main='',xlab='ave capital run length')
mean(training$capitalAve)
sd(training$capitalAve)
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve = mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
View(training)
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve = mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
library(caret);library(kernlab);data(spam)
inTrain<-createDataPartition(y=spam$type,p=.75,list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve,main='',xlab='ave capital run length')  ## skewed with few outliers
mean(training$capitalAve)  #  small mean
sd(training$capitalAve)    # huge sd by comparison
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve = mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
sd(trainCapAveS)
qplot(trainCapAveS,geom='density')
?qplot
qplot(trainCapAveS,geom='density',xlim=c(-2,2))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
preObj <- preProcess(training[,-58],method=c('center','scale'))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
testCapAveS <- predict(preObj,testing[,-58])$capitalAve
mean(testCapAveS)
sd(testCapAveS)
set.seed(32343)
modelFit <- train(type~.,data=training,preProcess=c('center','scale'),method='glm')
modelFit
preObj <- preProcess(training[,-58],method=c('BoxCox'))
trainCapAveS <- predict(preObj,training[,-58]$capitalAve)
par(mfrow=c(1,2));hist(trainCapAveS); qqnorm(trainCapAveS)
trainCapAveS <- predict(preObj,training[,-58]$capitalAve)
preObj <- preProcess(training[,-58],method=c('BoxCox'))
trainCapAveS <- predict(preObj,training[,-58]$capitalAve)
trainCapAveS <- predict(preObj,training$capitalAve)
trainCapAveS <- predict(preObj,training[,-58]$capitalAve)
preObj <- preProcess(training[,-58],method=c('BoxCox'))
trainCapAveS <- predict(preObj,training[,-58]$capitalAve)
par(mfrow=c(1,2));hist(trainCapAveS); qqnorm(trainCapAveS)
trainCapAveS <- predict(preObj,training[,-58]$capitalAve)
library(caret);library(kernlab);data(spam)
inTrain<-createDataPartition(y=spam$type,p=.75,list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve,main='',xlab='ave capital run length')  ## skewed with few outliers
mean(training$capitalAve)  #  small mean
sd(training$capitalAve)    # huge sd by comparison
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
sd(trainCapAveS)
preObj <- preProcess(training[,-58],method=c('center','scale'))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
testCapAveS <- predict(preObj,testing[,-58])$capitalAve
mean(testCapAveS)
sd(testCapAveS)
set.seed(32343)
modelFit <- train(type~.,data=training,preProcess=c('center','scale'),method='glm')
modelFit
preObj <- preProcess(training[,-58],method=c('BoxCox'))
trainCapAveS <- predict(preObj,training[,-58]$capitalAve)
par(mfrow=c(1,2));hist(trainCapAveS); qqnorm(trainCapAveS)
preObj <- preProcess(training[,-58],method=c('BoxCox'))
trainCapAveS <- predict(preObj,training[,-58]$capitalAve)
rm(trainCapAveS)
trainCapAveS <- predict(preObj,training[,-58]$capitalAve)
par(mfrow=c(1,2));hist(trainCapAveS); qqnorm(trainCapAveS)
rm(trainCapAveS)
preObj <- preProcess(training[,-58],method=c('BoxCox'))
trainCapAveS <- predict(preObj,training[,-58]$capitalAve)
trainCapAveS <- predict(preObj,as.matrix(training[,-58]$capitalAve)
trainCapAveS <- predict(preObj,as.matrix(training[,-58]$capitalAve))
trainCapAveS <- predict(preObj,as.matrix(training[,-58]$capitalAve))
preObj <- preProcess(as.matrix(training[,-58]),method=c('BoxCox'))
View(training)
preObj <- preProcess(training[,-58],method=c("BoxCox"))
trainCapAveS <- predict(preObj,training[,-58]$capitalAve)
install.packages(c("BH", "BradleyTerry2", "car", "data.table", "DBI", "devtools", "digest", "evaluate", "Formula", "ggplot2", "gsubfn", "highr", "Hmisc", "httpuv", "httr", "jsonlite", "KernSmooth", "knitr", "labeling", "manipulate", "mime", "quantmod", "quantreg", "RColorBrewer", "Rcpp", "RCurl", "reshape2", "rmarkdown", "RMySQL", "RSQLite", "SparseM", "swirl", "UsingR", "xlsx", "xlsxjars", "yaml"))
install.packages(c("BH", "BradleyTerry2", "car", "data.table",
install.packages(c("BH", "BradleyTerry2", "car", "data.table", "DBI", "devtools", "digest", "evaluate", "Formula", "ggplot2", "gsubfn", "highr", "Hmisc", "httpuv", "httr", "jsonlite", "KernSmooth", "knitr", "labeling", "manipulate", "mime", "quantmod", "quantreg", "RColorBrewer", "Rcpp", "RCurl", "reshape2", "rmarkdown", "RMySQL", "RSQLite", "SparseM", "swirl", "UsingR", "xlsx", "xlsxjars", "yaml"))
install.packages(c("BH", "BradleyTerry2", "car", "data.table",
)
)
install.packages(c("ggplot2", "Hmisc"))
install.packages(c("ggplot2", "Hmisc"))
install.packages(c("ggplot2", "Hmisc"))
library(quantmod);library(xts);library(zoo)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
ts1 <- ts(googOpen,frequency=12)
library(quantmod);library(xts);library(zoo)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
?getSymbol
?getSymbols
getSymbols("GOOG", src="google")
getSymbols("GOOG", src="google",env=globalenv())
s <- c("GOOG")
e <- new.env() #environment in which to store data
getSymbols(s, src="google", env=e)
getSymbols("GOOG", env=myEnv)
getSymbols("GOOG", env=e)
getSymbols(s, src="yahoo", env=e)
install.packages(c("car", "colorspace", "manipulate", "Rcpp", "RcppEigen", "RMySQL"))
tickers <- c("SPY","DIA","IWM","SMH","OIH","XLY",
"XLP","XLE","XLI","XLB","XLK","XLU")
getSymbols(tickers, from="2001-03-01", to="2011-03-11")
ClosePrices <- do.call(merge, lapply(tickers, function(x) Cl(get(x))))
head(ClosePrices)
tickers <- c("GOOG")
getSymbols(tickers, from="2001-03-01", to="2011-03-11")
getSymbols(tickers, from="2001-03-01", to="2011-03-11")
getSymbols(tickers,src="google", from="2001-03-01", to="2011-03-11")
tickers <- c("GOOG")
getSymbols(tickers,src="google", from="2001-03-01", to="2011-03-11")
Sys.getenv("http_proxy")
Sys.getenv("http_proxy_user")
getOption("download.file.method")
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
?hist
shiny::runApp('C:/Classes/Data Products/Shiny Project')
mtcars
?mtcars
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
x<-"mpg"
?assign
assign(hos,mtcars$mpg)
assign(mtcars$mpg,hos)
mtcars$mpg
paste0("mtcars$",x)
?subset
subset(mtcars,select = x)
mtcars
y<-"wt"
x1<-subset(mtcars,select = x)
y1<-subset(mtcars,select = y)
plot(x1,y1)
View(`y1`)
?plot
as.vector(x1)
x1[,1]
plot(x1[,1],y1[,1])
x1<-subset(mtcars,select = x)[,1]
y1<-subset(mtcars,select = y)[,1]
plot(x1,y1)
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
?ggplot
?qplot
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
?lm
x<-subset(mtcars,select = input$xaxis)[,1]
y<-subset(mtcars,select = input$yaxis)[,1]
x<-subset(mtcars,select = x)[,1]
y<-subset(mtcars,select = y)[,1]
fit<-lm(x~y)
fit
fit[1]
fit$coefficients[1]
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
?qplot
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
summary(fit)
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
summary(fit)
shiny::runApp('C:/Classes/Data Products/Shiny Project')
mtcars$hp
?predict
predict(fit,4)
predict(fit,data.frame(x=4))
predict(fit,4)
predict(fit,newdata=4)
data<-data.frame(x=x,y=y)
fit<-lm(y~x,data=data)
predict(fit,newdata=data.frame(x=4)
)
shiny::runApp('C:/Classes/Data Products/Shiny Project')
x<-mtcars$hp
y<-mtcars$mpg
newx<-150
data<-data.frame(x=x,y=y,type="Original")
fit<-lm(y~x,data=data)
newy<-predict(fit,newdata=data.frame(x=input$predictor))
newy<-predict(fit,newdata=data.frame(x=newx))
newdata<-rbind(data,data.frame(x=newx,y=newy,type="New"))
p<-qplot(x,y,data=newdata,main='Interactive plots of mtcars',xlab=input$xaxis,ylab=input$yaxis,color=type)
p<-qplot(x,y,data=newdata,main='Interactive plots of mtcars',color=type)
p
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
?signif
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
?mtcars
help(mtcars)
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
shiny::runApp('C:/Classes/Data Products/Shiny Project')
author("mydeck")
library(slidify)
author("mydeck")
hitheme     : tomorrow      #
widgets     : []            # {mathjax, quiz, bootstrap}
author      : cjstev
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
author("mydeck")
---
library(slidifyLibraries)
slidify(index.Rmd)
setwd('C:/Classes/Data Products/Slidify/Project Deck')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
--- #montreal bg:url(http://goo.gl/gl3ljz)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
require(ggplot2); require(nvd3); require(rCharts)
library("rNVD3", lib.loc="~/R/win-library/3.0")
require(ggplot2); require(rCharts);require(rNVD3)
require(ggplot2); require(rCharts);require(rNVD3)
slidify('index.Rmd')
data(mtcars)
qplot(wt,mpg,data=mtcars)
slidify('index.Rmd')
slidify('index.Rmd')
rPlot(mpg ~ wt | am + vs, data=mtcars, type="point")
rPlot(mpg ~ wt , data=mtcars, type="point")
?rPlot
rPlot(mpg ~ wt , data=mtcars, type="point")
rPlot(mpg ~ wt , data=mtcars, type="point",xlim=c(0,6))
nPlot(mpg ~ wt, data = mtcars, type = 'scatterChart')
nPlot(mpg ~ wt, data = mtcars, type = 'scatterChart')
help(rPlot)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
nPlot(mpg ~ wt, group = 'cyl', data = mtcars, type = 'scatterChart')
nPlot(mpg ~ wt, group = 'cyl', data = mtcars, type = 'scatterChart')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
install.packages(c("colorspace", "evaluate", "formatR", "Formula", "gbm", "ggplot2", "gtools", "highr", "manipulate", "mime", "quantmod", "roxygen2", "rstudioapi", "sandwich", "zoo"))
install.packages(c("colorspace", "evaluate", "formatR", "Formula",
library(rCharts)
options(
rcharts.mode = 'iframesrc',
rcharts.cdn = TRUE,
RCHART_WIDTH = 600,
RCHART_HEIGHT = 400
)
library(knitr)
opts_chunk$set(tidy = F, results = 'asis', comment = NA)
data(mtcars)
nPlot(mpg ~ wt, group = 'cyl', data = mtcars, type = 'scatterChart')
require(ggplot2); require(rCharts);require(rNVD3);data(mtcars)
library(rCharts)
options(
rcharts.mode = 'iframesrc',
rcharts.cdn = TRUE,
RCHART_WIDTH = 600,
RCHART_HEIGHT = 400
)
library(knitr)
opts_chunk$set(tidy = F, results = 'asis', comment = NA)
data(mtcars)
nPlot(mpg ~ wt, group = 'cyl', data = mtcars, type = 'scatterChart')
nPlot(mpg ~ wt, group = 'cyl', data = mtcars, type = 'scatterChart')
p1<-nPlot(mpg ~ wt, group = 'cyl', data = mtcars, type = 'scatterChart')
p1
p1$show("server")
p1
slidify('index.Rmd')
library(slidifyLibraries)
library(slidify)
slidify('index.Rmd')
slidify('index.Rmd')
?runDeck
runDeck('C:/Classes/Data Products/Slidify/Project Deck')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
runDeck('C:/Classes/Data Products/Slidify/Project Deck')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
runDeck('C:/Classes/Data Products/Slidify/Project Deck')
slidify('index.Rmd')
runDeck('C:/Classes/Data Products/Slidify/Project Deck')
?gridarrange
library("gridExtra", lib.loc="~/R/win-library/3.0")
?gridarrange
?grid.arrange
p1<-qplot(wt,mpg,data=mtcars)
p2<-qplot(hp,mpg,data=mtcars)
p3<-qplot(qsec,mpg,data=mtcars)
p4<-qplot(carb,mpg,data=mtcars)
grid.arrange(p1,p2,p3,p4,ncol=2)
p1<-qplot(wt,mpg,data=mtcars,main="Wt vs MPG")
grid.arrange(p1,p2,p3,p4,ncol=2)
p1<-qplot(wt,mpg,data=mtcars,main="Wt vs MPG")
p2<-qplot(hp,mpg,data=mtcars,main="Hp vs MPG")
p3<-qplot(qsec,mpg,data=mtcars,main="1/4 mi Time vs MPG")
p4<-qplot(carb,mpg,data=mtcars,main="# of Carbs vs MPG")
grid.arrange(p1,p2,p3,p4,ncol=2)
p1<-qplot(wt,mpg,data=mtcars,col=cyl,main="Wt vs MPG")
grid.arrange(p1,p2,p3,p4,ncol=2)
p1<-qplot(wt,mpg,data=mtcars,col=cyl,main="Wt vs MPG")
p2<-qplot(hp,mpg,data=mtcars,col=cyl,main="Hp vs MPG")
p3<-qplot(qsec,mpg,data=mtcars,col=cyl,main="1/4 mi Time vs MPG")
p4<-qplot(carb,mpg,data=mtcars,col=cyl,main="# of Carbs vs MPG")
grid.arrange(p1,p2,p3,p4,ncol=2)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
options(
rcharts.mode = 'iframesrc',
rcharts.cdn = TRUE,
RCHART_WIDTH = 1000,
RCHART_HEIGHT = 400
)
slidify('index.Rmd')
runDeck('C:/Classes/Data Products/Slidify/Project Deck')
grid.arrange(p1,p2,p3,p4,ncol=4)
slidify('index.Rmd')
runDeck('C:/Classes/Data Products/Slidify/Project Deck')
